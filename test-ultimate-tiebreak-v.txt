COMMENT: The Ultimate Tie-Breaking Test. Inspired by Hint 2. This file tests all common functor bugs in one go.
MODE: TL
NUM_TRADERS: 50
NUM_STOCKS: 5

// --- 阶段 1: 测试卖方队列 (Sell-Side) 的标准 FIFO 规则 ---
// 目标: 验证在最简单的情况下，程序是否遵守“先到先服务”。
// 预期: 交易顺序必须是 T1 -> T2 -> T3 -> T4 -> T5。
10 SELL T1 S0 $100 #1
10 SELL T2 S0 $100 #2
10 SELL T3 S0 $100 #3
10 SELL T4 S0 $100 #4
10 SELL T5 S0 $100 #5
11 BUY T0 S0 $101 #20

// --- 阶段 2: 测试买方队列 (Buy-Side) 的标准 FIFO 规则 ---
// 目标: 验证买方队列的“先到先服务”。
// 预期: 交易顺序必须是 T11 -> T12 -> T13 -> T14 -> T15。
20 BUY T11 S1 $50 #11
20 BUY T12 S1 $50 #12
20 BUY T13 S1 $50 #13
20 BUY T14 S1 $50 #14
20 BUY T15 S1 $50 #15
21 SELL T10 S1 $49 #100

// --- 阶段 3: 攻击“按 Trader ID 排序”的 Bug ---
// 目标: 揭露那些错误地使用 Trader ID 作为次要排序规则的程序。
// 我们让订单到达顺序 (决定 order_id) 和 Trader ID 的顺序完全相反。
// 预期: 正确的程序必须按到达顺序交易 (T25 -> T24 -> ...)，而不是 Trader ID 顺序。
30 SELL T25 S2 $200 #1  // 最早到达，但 Trader ID 最大
30 SELL T24 S2 $200 #1
30 SELL T23 S2 $200 #1
30 SELL T22 S2 $200 #1
30 SELL T21 S2 $200 #1  // 最晚到达，但 Trader ID 最小
31 BUY T20 S2 $201 #10

// --- 阶段 4: 攻击“按 Quantity 排序” 或 “LIFO (后到先服务)” 的 Bug ---
// 目标: 揭露那些错误地使用 Quantity 排序，或者把 order_id 逻辑写反的程序。
// 我们让订单到达顺序和 Quantity 的顺序也相反。
// 预期: 正确的程序必须按到达顺序交易 (T35 -> T34 -> ...)。
40 SELL T35 S3 $300 #5  // 最早到达，但 Quantity 最大
40 SELL T34 S3 $300 #4
40 SELL T33 S3 $300 #3
40 SELL T32 S3 $300 #2
40 SELL T31 S3 $300 #1  // 最晚到达，但 Quantity 最小
41 BUY T30 S3 $301 #20